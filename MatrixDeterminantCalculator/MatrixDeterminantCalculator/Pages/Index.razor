@page "/"
@page "/MatrixDeterminant/publish/wwwroot"
@using System.Threading

<div class="mainHolder">
    <div class="info" style="width:210px">Enter matrix below:</div>

<textarea @bind="InputString" @bind:event="oninput" style="width: @(TextAreaWidth)px; height: @(TextAreaHeight)px" placeholder="Type matrix here..." />
    <br />

    <div class="info" style="width:210px">Matrix size: @MatriSizeString</div>

    @switch(inputStatus) {
        case InputStatus.waitingForInput:
            <div class="status" style="background-color: #cbe6bc; width: 140px">Waiting for input...</div>
            break;
        case InputStatus.badInput:
            <div class="status" style="background-color:crimson; width: 140px">Invalid input</div>
            break;
        case InputStatus.invalidSize:
            <div class="status" style="background-color: #e4c335; width: 140px ">Incomplete input</div>
            break;
        case InputStatus.ok:
        default:
            <div class="status" style="background-color: #cbe6bc; width: 140px">Ok</div>
            break;
    }

    <div>
        <textarea @bind="outputString" style="width: @(TextAreaWidth)px; height: @(TextAreaHeight)px" readonly placeholder="Result" />
    </div>

    @if(Loading) {
        <div class="info" style="width:210px">Loading...</div>
    } else {
        <div class="info" style="width:210px">Determinant: <b>@determinantString</b></div>
    }
</div>

@code {
    public enum InputStatus {
        waitingForInput,
        ok,
        badInput,
        invalidSize
    }
    public InputStatus inputStatus = InputStatus.waitingForInput;

    public Task CalculationTask;
    public bool Loading = false;
    CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
    Matrix matrix = new Matrix(0, 0);

    private const int minWidth = 140;
    private const int minHeight = 70;
    private int textAreaWidth = minWidth;
    private int textAreaHeight = minHeight;

    public int TextAreaWidth {
        get { return textAreaWidth; }
        set {
            textAreaWidth = Math.Max(minWidth, value);
        }
    }
    public int TextAreaHeight {
        get { return textAreaHeight; }
        set {
            textAreaHeight = Math.Max(minHeight, value);
        }
    }

    public string MatriSizeString = "N/A";

    private string inputString = "";
    public string InputString {
        get { return inputString; }
        set {
            inputString = value;
            DisplayInformation(inputString);
        }
    }

    public string outputString = "...";
    public string determinantString = "...";

    void SetTextAreaSize(int width, int height, int maxNumLength) {
        TextAreaWidth = width * maxNumLength * 16;
        TextAreaHeight = height * 22;
    }

    void DisplayInformation(string input) {
        var rawNums = input.Split('\n', StringSplitOptions.RemoveEmptyEntries)
            .Select(line => line.Split(' ', StringSplitOptions.RemoveEmptyEntries))
            .Select(words => words.Select(word => {
                return double.TryParse(word, out double v) ? v : double.NaN;
            }).ToArray()).ToArray();

        int maxSideLength = rawNums.Length;
        inputStatus = InputStatus.ok;

        for(int i = 0; i < rawNums.Length; i++) {
            int sideLength = rawNums[i].Length;
            if(sideLength > maxSideLength) {
                maxSideLength = sideLength;
                inputStatus = InputStatus.invalidSize;
            } else if(sideLength != maxSideLength) {
                inputStatus = InputStatus.invalidSize;
            }
        }

        var rand = new Random();
        int maxNumLength = 1;
        double[][] nums = new double[maxSideLength][];
        for(int i = 0; i < maxSideLength; i++) {
            nums[i] = new double[maxSideLength];
            for(int j = 0; j < maxSideLength; j++) {
                double v = nums[i][j] = i < rawNums.Length && j < rawNums[i].Length ? rawNums[i][j] : 0;

                int length;
                if(double.IsNaN(v)) {
                    length = v.ToString().Length;
                    inputStatus = InputStatus.badInput;
                } else {
                    length = (int)Math.Ceiling(Math.Log10(v));
                }
                if(length > maxNumLength) {
                    maxNumLength = length;
                }
            }
        }

        var newMatrix = new Matrix(nums);
        if(matrix.CompareTo(newMatrix) == 0) {
            return;
        }
        matrix = newMatrix;
        SetTextAreaSize(matrix.width, matrix.height, maxNumLength);
        MatriSizeString = String.Format("{0}x{1}", matrix.width, matrix.height);

        outputString = String.Join('\n', nums.Select(numsRow => String.Join(' ', numsRow.Select(n => String.Format("{0,-" + maxNumLength.ToString() + "}", n)))));

        if(!CalculationTask?.IsCompleted ?? false) {
            cancellationTokenSource.Cancel();
            cancellationTokenSource = new CancellationTokenSource();
        }
        var cancellationToken = cancellationTokenSource.Token;

        (CalculationTask = Task.Run(async () => {
            var determinant = await matrix.CalculateDeterminant(cancellationToken);
            determinantString = determinant.ToString();
            StateHasChanged();
            Loading = false;
            return true;
        }, cancellationToken)).ContinueWith(t => {
            StateHasChanged();
        });
        Task.Delay(200).ContinueWith((t) => {
            Loading = !CalculationTask.IsCompleted;
            StateHasChanged();
        });
    }
}