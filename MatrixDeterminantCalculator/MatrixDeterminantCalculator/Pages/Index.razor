@page "/"

<h3>Enter matrix below:</h3>

<textarea @bind="InputString" @bind:event="oninput" style="height:200px; width:200px" />
<br />

<h3>Input:</h3>
<div style="background-color:aliceblue; width: 250px">@statusString</div>
<div>
    <textarea @bind="outputString" style="height:200px; width:200px" readonly />
</div>

<h3>Determinant: @determinantString</h3>

@code {
    private string inputString = "Type matrix here";
    public string InputString {
        get { return inputString; }
        set {
            inputString = value;
            TryCreateMatrix(inputString);
        }
    }

    public string statusString = "...";
    public string outputString = "...";
    public string determinantString = "...";

    bool TryCreateMatrix(string input) {
        var rawNums = input.Split('\n', StringSplitOptions.RemoveEmptyEntries).Select(line => line.Split(' ', StringSplitOptions.RemoveEmptyEntries)).Select(words => words.Select(word => {
            return double.TryParse(word, out double v) ? v : double.NaN;
        }).ToArray()).ToArray();

        int maxSideLength = rawNums.Length;
        bool squareMatrix = true;
        for (int i = 0; i < rawNums.Length; i++) {
            int sideLength = rawNums[i].Length;
            if (sideLength > maxSideLength) {
                maxSideLength = sideLength;
                squareMatrix = false;
            } else if (sideLength != maxSideLength) {
                squareMatrix = false;
            }
        }

        int maxLength = 1;
        double[][] nums = new double[maxSideLength][];
        for (int i = 0; i < maxSideLength; i++) {
            nums[i] = new double[maxSideLength];
            for (int j = 0; j < maxSideLength; j++) {
                double v = nums[i][j] = i < rawNums.Length && j < rawNums[i].Length ? rawNums[i][j] : 0;

                int length = double.IsNaN(v) ? 3 : (int)Math.Round(Math.Log10(v));
                if (length > maxLength) {
                    maxLength = length;
                }
            }
        }

        Matrix m = new Matrix(nums);

        outputString = String.Join('\n', nums.Select(numsRow => String.Join(' ', numsRow.Select(n => String.Format("{0,-" + maxLength.ToString() + "}", n)))));
        statusString = squareMatrix ? "Ok" : "Entered matrix is not square.";
        determinantString = m.CalculateDeterminant().ToString();

        return true;
    }
}