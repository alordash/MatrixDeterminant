@page "/"
@page "/MatrixDeterminant/publish/wwwroot"
@using System.Threading

@code {
    public enum InputStatus {
        ok,
        badInput,
        invalidSize
    }
    public InputStatus inputStatus = InputStatus.ok;
}

<h3>Enter matrix below:</h3>

<textarea @bind="InputString" @bind:event="oninput" style="height:100px; width:140px" />
<br />

<h3>Input:</h3>
@switch(inputStatus) {
    case InputStatus.badInput:
        <div style="background-color:crimson; width: 250px">Entered invalid characters</div>
        break;
    case InputStatus.invalidSize:
        <div style="background-color:yellow; width: 250px">Entered matrix is not square</div>
        break;
    case InputStatus.ok:
    default:
        <div style="background-color:aliceblue; width: 250px">Ok</div>
        break;
}

<div>
    <textarea @bind="outputString" style="height:100px; width:140px" readonly />
</div>

@if(Loading) {
    <h3>Loading...</h3>
} else {
    <h3>Determinant: @determinantString</h3>
}

@code {
    public Task CalculationTask;
    public bool Loading = false;
    CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    private string inputString = "Type matrix here";
    public string InputString {
        get { return inputString; }
        set {
            inputString = value;
            DisplayInformation(inputString);
        }
    }

    public string outputString = "...";
    public string determinantString = "...";

    void DisplayInformation(string input) {
        var rawNums = input.Split('\n', StringSplitOptions.RemoveEmptyEntries)
            .Select(line => line.Split(' ', StringSplitOptions.RemoveEmptyEntries))
            .Select(words => words.Select(word => {
                return double.TryParse(word, out double v) ? v : double.NaN;
            }).ToArray()).ToArray();

        int maxSideLength = rawNums.Length;
        inputStatus = InputStatus.ok;

        for(int i = 0; i < rawNums.Length; i++) {
            int sideLength = rawNums[i].Length;
            if(sideLength > maxSideLength) {
                maxSideLength = sideLength;
                inputStatus = InputStatus.invalidSize;
            } else if(sideLength != maxSideLength) {
                inputStatus = InputStatus.invalidSize;
            }
        }

        var rand = new Random();
        int maxLength = 1;
        double[][] nums = new double[maxSideLength][];
        for(int i = 0; i < maxSideLength; i++) {
            nums[i] = new double[maxSideLength];
            for(int j = 0; j < maxSideLength; j++) {
                double v = nums[i][j] = i < rawNums.Length && j < rawNums[i].Length ? rawNums[i][j] : i + j + 1/*rand.NextDouble()*/;

                int length;
                if(double.IsNaN(v)) {
                    length = 3;
                    inputStatus = InputStatus.badInput;
                } else {
                    length = (int)Math.Ceiling(Math.Log10(v));
                }
                if(length > maxLength) {
                    maxLength = length;
                }
            }
        }

        Matrix matrix = new Matrix(nums);

        outputString = String.Join('\n', nums.Select(numsRow => String.Join(' ', numsRow.Select(n => String.Format("{0,-" + maxLength.ToString() + "}", n)))));

        if(!CalculationTask?.IsCompleted ?? false) {
            cancellationTokenSource.Cancel();
            cancellationTokenSource = new CancellationTokenSource();
        }
        var cancellationToken = cancellationTokenSource.Token;

        (CalculationTask = Task.Run(async () => {
            var determinant = await matrix.CalculateDeterminant(cancellationToken);
            determinantString = determinant.ToString();
            StateHasChanged();
            Loading = false;
            return true;
        }, cancellationToken)).ContinueWith(t => {
            StateHasChanged();
        });
        Task.Delay(300).ContinueWith((t) => {
            Loading = !CalculationTask.IsCompleted;
            StateHasChanged();
        });
    }
}